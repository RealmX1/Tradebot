I'll have one model trained to output prediction on whether each stock will go up/down.
And this, together with raw stockdata & stock owned(and potentilaly other stuff) is fed to the second model for making the action 
of buying and selling.


Maybe use AI to determine meta strategy? When to use each strategy.
Thursday, March 23, 2023
1:03 AM
This makes it a classifier problem: Given current market condition, determine which startegy to use.

Automated strategy tester using AI classifier; if some certain strategy dominates the AI usecase, 
then swap the unpopular strategies out for new ones (maybe even new ones that are AI generated or jsut ML models themselves).


ignore this ### I previously thought about training the model based on only realtive time information... 
After some second thought I realize that this might not be a good idea.
But only experiment can tell. ###


03/23
I curretnly have to routes: I can either write strategies in python and test them on local csvs ,and then convert them to traderveiw;
or I can learn to   write them in Traderview language and te





03/27
ask the model to draw a prediction line.
Train three seperate models where their loss on which to base the learning differs in terms of prediction time:
set the loss to be the difference between the prediction line and the actual line.

03/28
implementing the idea described in 03/27 record.







03/31;
Maybe I should train the model to learn increase "estimated account value".
backprop requires a direct output & desired target; I guess direct output would be 1. a set of actions (buy, sell etc), 
which would be used by another network to calculate estimated account value later.
this is pretty similar to transformer structure... right?

I relized that most Reinforcement learning algorithm assumes the next state of the environmnet is the result of 
only the agent's action and the state of previous environment.

but this isn't the case with stock market; what can be done to address this issue?



note that a RL reword function need to give penalty for doing nothing -- -1 for each step.




Maybe I should start by creating a functional testbed before considering implementing all of these ideas;
I already have a working lstm that cna be used to test the testbed itself, so I;ll probably get into it now.
The testbed should currently utilize only data of 1 stock, and 7 input features.
time,open,high,low,close,Volume,Volume MA


Should I remove the volume ma?
probably so after I added better indicators.

The testbed should allow the program to simulate buying and selling activity, and keep track of 
1) stock owned 2) estimated account value
what else? 

Ask chatgpt to write the crude code.

Actual testing will be done in another main file.




Maybe even simulate multiple agents bargaining for stock profit.

04/04
oil price, FED pivot, gold/silver, etc. should also be features used to make (long term) predictions.
but if it is necessary to use structured data, then 
1) the data collection will be too problematic might have to automate the process (especially for features like FED pivot), and 
2) the change of some features is so infreaquent, that maybe other metric should be used in training (delta of the metric+bias of the metric) (normalize, and use delta)


Feature Engineering for Multivariate Time Series
"https://towardsdatascience.com/a-step-by-step-guide-to-feature-engineering-for-multivariate-time-series-162ccf232e2f"


VWAP,MACD,EMA
wt, cci, adx
TODO: Build index library of my own.
BIG_IDEA: should those index be given as features incorporated in dataset? 
    Or should the calculation method (hyperparameters in calculation) also be part of MODEL"S CHOICE?
    The model output a hyperparameter? Is this viable? Theory problem.




https://paperswithcode.com/paper/are-transformers-effective-for-time-series
maybe simple fully connected is good enough for short term prediction...





04/05
probably should try lumibot for back testing.
https://www.youtube.com/watch?v=Dek7sKHJ7Zw

04/06
TODO: ADD a feature that embeds the time of the day (how many percent of the day trade time has passed.)


Also, for each individual inputset, normalize the input (so that the machine doesnt' only learn historical pattern from non-relative stock price, and not making useful prediction)
(don't include the targets when calculating mean and std, instead target normalization should use mean and std of the inputs) 
DONE!

TODO_L: how to output confidence of a prediction? Maybe use another NN that is trained on original data and output of price prediction lstm.

TODO: calculate return of buying and selling according to stock price prediction. 
BIG_IDEA: (estimated return, and actual return; train another model -- or a model using this as base -- to estimate actual return & make decision?) Transformer?

TODO: plot the direction prediction graph.


TODO: follow https://machinelearningmastery.com/lstm-for-time-series-prediction-in-pytorch/ and adjust the training process...???
Maybe predict one step, then put that step in input to predict one down the line? But that requires prediction of all features... (to add a new frame in the time window)

TODO: since I've implemented normalization across different feature set individually, the relative relation between them is partially lost.
How can this be addressed?
Shoudl some features be exempt from normalization?
Should the normalization happen only with respect to the close price?